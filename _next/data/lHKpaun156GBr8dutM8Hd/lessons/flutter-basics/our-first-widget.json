{"pageProps":{"post":{"attributes":{},"html":"<p>The initial template includes a quick Stateful Widget to test the framework, but we don&#39;t need it. </p>\n<p>We will create a new widget. A widget is a class that, in its stateless format, extends from <code>StatelessWidget</code> and it contains one mandatory property that needs to be received in the constructor: <code>key</code>. For a quick snippet, type <code>stless</code> and press tab in your IDE.</p>\n<p>The widget has a <code>build</code> method that must return other Widget. There are hundreds of built-in Widgets in the framework.</p>\n<p>Your first widget will look like:</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/widgets.dart&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Greet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-keyword\">const</span> Greet ({ Key? key }) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n        <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;Flutter&quot;</span>;\n    <span class=\"hljs-keyword\">return</span> Text(<span class=\"hljs-string\">&quot;Hello <span class=\"hljs-subst\">$name</span>&quot;</span>);\n  }\n}\n</code></pre>\n<p>Now, we will convert it into a Stateful widget, for that you can use the IDE tooltips over the class name and select <code>Convert to Stateful widget</code>. That will create two connected classes, the widget that we won&#39;t touch too much, and the State class.</p>\n<pre><code class=\"hljs language-dart\">\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/widgets.dart&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Greet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-keyword\">const</span> Greet ({ Key? key }) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  State&lt;Greet&gt; createState() =&gt; _GreetState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_GreetState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&lt;<span class=\"hljs-title\">Greet</span>&gt; </span>{\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n        <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;Flutter&quot;</span>;\n    <span class=\"hljs-keyword\">return</span> Text(<span class=\"hljs-string\">&quot;Hello <span class=\"hljs-subst\">$name</span>&quot;</span>);\n  }\n}\n</code></pre>\n<p>Now properties of the widget that are set from the outside should be defined in the widget class, and variables that changes the state (and should cause a re-render of the widget) should be within the State class. Have in mind you must update your state variables and objects within a <code>setState</code> call.</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;package:flutter/material.dart&#x27;</span>;\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Greet</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-keyword\">const</span> Greet({Key? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  State&lt;Greet&gt; createState() =&gt; _GreetState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_GreetState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&lt;<span class=\"hljs-title\">Greet</span>&gt; </span>{\n  <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-string\">&quot;&quot;</span>;\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Column(\n      children: [\n        Text(<span class=\"hljs-string\">&quot;Hello <span class=\"hljs-subst\">$name</span>&quot;</span>),\n        TextField(\n          onChanged: (newValue) {\n            setState(() {\n              name = newValue;\n            });\n          },\n          decoration: <span class=\"hljs-keyword\">const</span> InputDecoration(\n            border: OutlineInputBorder(),\n            labelText: <span class=\"hljs-string\">&quot;Your Name:&quot;</span>,\n          ),\n        )\n      ],\n    );\n  }\n}\n</code></pre>\n","slug":"our-first-widget","title":"Our First Widget","section":"Flutter Basics","icon":"baby","filePath":"/home/runner/work/intro-flutter/intro-flutter/lessons/02-flutter-basics/C-our-first-widget.md","nextSlug":"/intro-flutter/lessons/user-interface-basics/creating-offers-section copy","prevSlug":"/intro-flutter/lessons/flutter-basics/basic-concepts"}},"__N_SSG":true}