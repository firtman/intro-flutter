{"pageProps":{"post":{"attributes":{},"html":"<p>Finally, we have to update our <code>OrderPage</code> so it can render its content. We will start by creating a simple view for when the cart is empty, then the CartItem that we will repeat for every item, and the <code>ListView</code> that will render all its contents.</p>\n<h2 id=\"orderitem\">OrderItem</h2>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OrderItem</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-keyword\">final</span> ItemInCart item;\n  <span class=\"hljs-keyword\">final</span> <span class=\"hljs-built_in\">Function</span> onRemove;\n  <span class=\"hljs-keyword\">const</span> OrderItem({Key? key, <span class=\"hljs-keyword\">required</span> <span class=\"hljs-keyword\">this</span>.item, <span class=\"hljs-keyword\">required</span> <span class=\"hljs-keyword\">this</span>.onRemove})\n      : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> Card(\n      elevation: <span class=\"hljs-number\">4</span>,\n      child: Padding(\n        padding: <span class=\"hljs-keyword\">const</span> EdgeInsets.all(<span class=\"hljs-number\">8.0</span>),\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.start,\n          children: [\n            Expanded(\n                flex: <span class=\"hljs-number\">1</span>,\n                child: Padding(\n                  padding: <span class=\"hljs-keyword\">const</span> EdgeInsets.only(left: <span class=\"hljs-number\">8.0</span>),\n                  child: Text(<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">${item.quantity}</span>x&quot;</span>),\n                )),\n            Expanded(\n                flex: <span class=\"hljs-number\">6</span>,\n                child: Text(\n                  item.product.name,\n                  style: <span class=\"hljs-keyword\">const</span> TextStyle(fontWeight: FontWeight.bold),\n                )),\n            Expanded(\n                flex: <span class=\"hljs-number\">2</span>,\n                child: Text(<span class=\"hljs-string\">&quot;\\$&quot;</span> +\n                    (item.product.price * item.quantity).toStringAsFixed(<span class=\"hljs-number\">2</span>))),\n            Expanded(\n                flex: <span class=\"hljs-number\">1</span>,\n                child: IconButton(\n                    color: Theme.of(context).primaryColor,\n                    onPressed: () {\n                      onRemove(item.product);\n                    },\n                    icon: <span class=\"hljs-keyword\">const</span> Icon(Icons.delete)))\n          ],\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<h2 id=\"orderpage\">OrderPage</h2>\n<p>We will need to convert the Stateless widget into a Stateful widget because the list will be updated every time we delete one item</p>\n<pre><code class=\"hljs language-dart\">\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OrderPage</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatefulWidget</span> </span>{\n  <span class=\"hljs-keyword\">final</span> DataManager dataManager;\n  <span class=\"hljs-keyword\">const</span> OrderPage({Key? key, <span class=\"hljs-keyword\">required</span> <span class=\"hljs-keyword\">this</span>.dataManager}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  State&lt;OrderPage&gt; createState() =&gt; _OrderPageState();\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">_OrderPageState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">State</span>&lt;<span class=\"hljs-title\">OrderPage</span>&gt; </span>{\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">if</span> (widget.dataManager.cart.isEmpty) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">const</span> Padding(\n        padding: EdgeInsets.all(<span class=\"hljs-number\">16.0</span>),\n        child: Text(<span class=\"hljs-string\">&quot;Your order is empty&quot;</span>),\n      );\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> Padding(\n        padding: <span class=\"hljs-keyword\">const</span> EdgeInsets.all(<span class=\"hljs-number\">8.0</span>),\n        child: Column(\n          children: [\n            ListView.builder(\n                shrinkWrap: <span class=\"hljs-keyword\">true</span>,\n                physics: <span class=\"hljs-keyword\">const</span> ClampingScrollPhysics(),\n                itemCount: widget.dataManager.cart.length,\n                itemBuilder: (context, index) {\n                  <span class=\"hljs-keyword\">var</span> item = widget.dataManager.cart[index];\n                  <span class=\"hljs-keyword\">return</span> OrderItem(\n                      item: item,\n                      onRemove: (product) {\n                        setState(() {\n                          widget.dataManager.cartDelete(product);\n                        });\n                      });\n                }),\n            Padding(\n              padding: <span class=\"hljs-keyword\">const</span> EdgeInsets.all(<span class=\"hljs-number\">8.0</span>),\n              child: Text(\n                  <span class=\"hljs-string\">&quot;Total: \\$<span class=\"hljs-subst\">${widget.dataManager.cartTotal().toStringAsFixed(<span class=\"hljs-number\">2</span>)}</span>&quot;</span>),\n            ),\n            Padding(\n              padding: <span class=\"hljs-keyword\">const</span> EdgeInsets.only(top: <span class=\"hljs-number\">28.0</span>),\n              child: SizedBox(\n                width: <span class=\"hljs-number\">200</span>,\n                child: ElevatedButton(\n                    style: ElevatedButton.styleFrom(\n                        primary: Colors.green.shade900),\n                    onPressed: () {\n                      <span class=\"hljs-comment\">//<span class=\"hljs-doctag\">TODO:</span></span>\n                    },\n                    child: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">&quot;Send Order&quot;</span>)),\n              ),\n            )\n          ],\n        ),\n      );\n    }\n  }\n}\n</code></pre>\n<p>Now we need to finish the Send Order button by adding some behaviour and creating an <code>AlertDialog</code> widget to show to the user</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-comment\">// this code goes in the <span class=\"hljs-doctag\">TODO:</span> in the previous widget</span>\nshowDialog(\n    context: context,\n    builder: (context) =&gt; <span class=\"hljs-keyword\">const</span> OrderAlert());\nsetState(() {\n    <span class=\"hljs-comment\">// we update the cart within setState so the current widget will get re-rendered</span>\n    widget.dataManager.cartClear();\n});\n</code></pre>\n<p>The <code>OrderAlert</code> widget looks like:</p>\n<pre><code class=\"hljs language-dart\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">OrderAlert</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">StatelessWidget</span> </span>{\n  <span class=\"hljs-keyword\">const</span> OrderAlert({Key? key}) : <span class=\"hljs-keyword\">super</span>(key: key);\n\n  <span class=\"hljs-meta\">@override</span>\n  Widget build(BuildContext context) {\n    <span class=\"hljs-keyword\">return</span> AlertDialog(\n      title: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">&quot;Your Order&quot;</span>),\n      content: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">&quot;Your order is being prepared. Thanks!&quot;</span>),\n      actions: [\n        TextButton(\n            onPressed: () =&gt; Navigator.pop(context, <span class=\"hljs-string\">&#x27;OK&#x27;</span>),\n            child: <span class=\"hljs-keyword\">const</span> Text(<span class=\"hljs-string\">&#x27;OK&#x27;</span>))\n      ],\n    );\n  }\n}\n</code></pre>\n","slug":"creating-the-cart-page","title":"Creating the Cart Page","section":"Using APIs and JSON","icon":"bridge","filePath":"/home/runner/work/intro-flutter/intro-flutter/lessons/06-using-APIs-and-JSON/D-creating-the-cart-page.md","nextSlug":"/intro-flutter/lessons/compiling-for-web/creating-a-PWA","prevSlug":"/intro-flutter/lessons/using-APIs-and-JSON/finishing-the-menu"}},"__N_SSG":true}